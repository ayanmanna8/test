{
  "layout": "panel",
  "rdbmsId": "ffee4fd5-48d7-4316-b830-b499a7e06d89",
  "hidden": true,
  "insightName": "Inventory Insights 031720 02 - 0",
  "recipe": "AddPanel ( 0 ) ; Panel ( 0 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"STANDARD\" , \"opacity\" : 100 } } ] ) ; Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003e(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif((IsEmpty(\u003cSelectedValues\u003e)),(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e)), (\u003cFrame\u003e | SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e)));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ; Panel ( 0 ) | RetrievePanelEvents ( ) ; Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ; Panel ( 0 ) | SetPanelView ( \"federate-view\" , \"\u003cencode\u003e{\"app_id\":\"3b3e4a3b-d382-4e98-9950-9b4e8b308c1c\"}\u003c/encode\u003e\" ) ; CreateFrame ( GRID ) .as ( [ \u0027FRAME697834\u0027 ] ) ; Database ( database \u003d [ \"3b3e4a3b-d382-4e98-9950-9b4e8b308c1c\" ] ) | Query ( \"\u003cencode\u003eselect * from server_details sd\n    left outer join operating_systems ops on ops.ID \u003d sd.operating_system_ID\nleft outer join platforms plt on plt.ID \u003d sd.platform_ID \nleft outer join server_environment_master env on env.ID \u003d sd.environment_ID\u003c/encode\u003e\" ) | Import ( frame \u003d [ FRAME697834 ] ) ; Panel ( 0 ) | SetPanelView ( \"visualization\" ) ; Frame ( frame \u003d [ FRAME697834 ] ) | QueryAll ( ) | AutoTaskOptions ( panel \u003d [ \"0\" ] , layout \u003d [ \"Grid\" ] ) | Collect ( 2000 ) ; Panel ( 0 ) | SetPanelView ( \"federate-view\" ) ; Panel ( 0 ) | SetPanelView ( \"pipeline\" ) ; FileRead ( filePath \u003d [ \"APP_FOLDER\\INSIGHT_FOLDER\\data\\location (1).csv\" ] , dataTypeMap \u003d [ { \"Location\" : \"STRING\" , \"Lat\" : \"DOUBLE\" , \"Long\" : \"DOUBLE\" } ] , delimiter \u003d [ \",\" ] , newHeaders \u003d [ { } ] , fileName \u003d [ \"location (1).csv\" ] , additionalDataTypes \u003d [ { } ] )  | Select ( DND__Location , DND__Lat , DND__Long ) .as ( [ Location , Lat , Long ] ) | Import ( frame \u003d [ CreateFrame ( frameType \u003d [ GRID ] , override \u003d [ false ] ) .as ( [ \"FRAME605478\" ] ) ] ) ; Frame ( FRAME697834 ) | Select ( FRAME697834__auth_profile , FRAME697834__business_application , FRAME697834__created_by , FRAME697834__created_date , FRAME697834__DATABASE_CREDENTIAL_ID , FRAME697834__DESCRIPTION , FRAME697834__DISPLAY_NAME , FRAME697834__ENDPOINT_URL , FRAME697834__ENVIRONMENT , FRAME697834__environment_ID , FRAME697834__hostname , FRAME697834__ID , FRAME697834__ID_1 , FRAME697834__ID_2 , FRAME697834__ID_3 , FRAME697834__INFRASTRUCTURE , FRAME697834__IS_ACTIVE , FRAME697834__is_deleted , FRAME697834__Is_Manual , FRAME697834__location , FRAME697834__mapping_source_server_ID , FRAME697834__modified_by , FRAME697834__modified_date , FRAME697834__move_group_id , FRAME697834__OPERATING_SYSTEM , FRAME697834__OPERATING_SYSTEMS_IMAGE , FRAME697834__operating_system_ID , FRAME697834__output_path , FRAME697834__PLATFORM , FRAME697834__platform_ID , FRAME697834__PLATFORM_IMAGE , FRAME697834__reparse_requested , FRAME697834__report_run_date , FRAME697834__report_run_end_date , FRAME697834__server_ip , FRAME697834__storagetemplate_ID , FRAME697834__type , FRAME697834__validation_status_ID ) .as ( [ auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , location , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ] ) | Merge ( joins \u003d [ ( Location , right.outer.join , location ) ] , frame \u003d [ FRAME605478 ] ) ; RemoveFrame ( \"FRAME697834\" ) ; Panel ( 0 ) | SetPanelView ( \"visualization\" ) ; Frame ( frame \u003d [ FRAME605478 ] ) | QueryAll ( ) | AutoTaskOptions ( panel \u003d [ \"0\" ] , layout \u003d [ \"Grid\" ] ) | Collect ( 2000 ) ; FRAME605478 | Convert ( frameType \u003d [ R ] ) .as ( [ \u0027FRAME605478\u0027 ] ) ; Frame ( frame \u003d [ FRAME605478 ] ) | Select ( auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , Lat , Location , Long , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ) .as ( [ auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , Lat , Location , Long , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"auth_profile\" , \"business_application\" , \"created_by\" , \"created_date\" , \"DATABASE_CREDENTIAL_ID\" , \"DESCRIPTION\" , \"DISPLAY_NAME\" , \"ENDPOINT_URL\" , \"ENVIRONMENT\" , \"environment_ID\" , \"hostname\" , \"ID\" , \"ID_1\" , \"ID_2\" , \"ID_3\" , \"INFRASTRUCTURE\" , \"IS_ACTIVE\" , \"is_deleted\" , \"Is_Manual\" , \"Lat\" , \"Location\" , \"Long\" , \"mapping_source_server_ID\" , \"modified_by\" , \"modified_date\" , \"move_group_id\" , \"OPERATING_SYSTEM\" , \"OPERATING_SYSTEMS_IMAGE\" , \"operating_system_ID\" , \"output_path\" , \"PLATFORM\" , \"platform_ID\" , \"PLATFORM_IMAGE\" , \"reparse_requested\" , \"report_run_date\" , \"report_run_end_date\" , \"server_ip\" , \"storagetemplate_ID\" , \"type\" , \"validation_status_ID\" ] } } } ) | Collect ( 2000 ) ; FRAME605478 | DropRows ( qs \u003d [ Filter ( is_deleted \u003d\u003d \"1\" ) ] ) ; ifError ( ( Frame ( frame \u003d [ FRAME605478 ] ) | Select ( auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , Lat , Location , Long , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ) .as ( [ auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , Lat , Location , Long , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"auth_profile\" , \"business_application\" , \"created_by\" , \"created_date\" , \"DATABASE_CREDENTIAL_ID\" , \"DESCRIPTION\" , \"DISPLAY_NAME\" , \"ENDPOINT_URL\" , \"ENVIRONMENT\" , \"environment_ID\" , \"hostname\" , \"ID\" , \"ID_1\" , \"ID_2\" , \"ID_3\" , \"INFRASTRUCTURE\" , \"IS_ACTIVE\" , \"is_deleted\" , \"Is_Manual\" , \"Lat\" , \"Location\" , \"Long\" , \"mapping_source_server_ID\" , \"modified_by\" , \"modified_date\" , \"move_group_id\" , \"OPERATING_SYSTEM\" , \"OPERATING_SYSTEMS_IMAGE\" , \"operating_system_ID\" , \"output_path\" , \"PLATFORM\" , \"platform_ID\" , \"PLATFORM_IMAGE\" , \"reparse_requested\" , \"report_run_date\" , \"report_run_end_date\" , \"server_ip\" , \"storagetemplate_ID\" , \"type\" , \"validation_status_ID\" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ; FRAME605478 | UpdateRowValues ( Lat , \"0\" , Filter ( Location \u003d\u003d \"\" ) ) ; FRAME605478 | UpdateRowValues ( Long , \"0\" , Filter ( Location \u003d\u003d \"\" ) ) ; FRAME605478 | UpdateRowValues ( Long , \"0\" , Filter ( Location \u003d\u003d \"\" ) ) ; if ( ( FRAME605478 | HasDuplicates ( Location , Lat , Long ) ) , ( Frame ( frame \u003d [ FRAME605478 ] ) | Select ( Location , Lat , Long ) .as ( [ Location , Lat , Long ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Lat\" ] , \"longitude\" : [ \"Long\" ] , \"size\" : [ ] , \"color\" : [ ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( frame \u003d [ FRAME605478 ] ) | Select ( Location , Lat , Long ) .as ( [ Location , Lat , Long ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Lat\" ] , \"longitude\" : [ \"Long\" ] , \"size\" : [ ] , \"color\" : [ ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 2000 ) ) ) ; if ( ( FRAME605478 | HasDuplicates ( Location , Lat , Long ) ) , ( Frame ( frame \u003d [ FRAME605478 ] ) | Select ( Location , Lat , Long , Count ( server_ip ) ) .as ( [ Location , Lat , Long , Count_of_server_ip ] ) | Group ( Location , Lat , Long ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Lat\" ] , \"longitude\" : [ \"Long\" ] , \"size\" : [ \"Count_of_server_ip\" ] , \"color\" : [ ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( frame \u003d [ FRAME605478 ] ) | Select ( Location , Lat , Long , Count ( server_ip ) ) .as ( [ Location , Lat , Long , Count_of_server_ip ] ) | Group ( Location , Lat , Long ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Lat\" ] , \"longitude\" : [ \"Long\" ] , \"size\" : [ \"Count_of_server_ip\" ] , \"color\" : [ ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 2000 ) ) ) ; if ( ( FRAME605478 | HasDuplicates ( Location , Lat , Long ) ) , ( Frame ( frame \u003d [ FRAME605478 ] ) | Select ( Location , Lat , Long , UniqueCount ( server_ip ) ) .as ( [ Location , Lat , Long , Unique_Count_of_server_ip ] ) | Group ( Location , Lat , Long ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Lat\" ] , \"longitude\" : [ \"Long\" ] , \"size\" : [ \"Unique_Count_of_server_ip\" ] , \"color\" : [ ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( frame \u003d [ FRAME605478 ] ) | Select ( Location , Lat , Long , Count ( server_ip ) ) .as ( [ Location , Lat , Long , Count_of_server_ip ] ) | Group ( Location , Lat , Long ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Lat\" ] , \"longitude\" : [ \"Long\" ] , \"size\" : [ \"Count_of_server_ip\" ] , \"color\" : [ ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 2000 ) ) ) ; Panel ( 0 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 0 , \"width\" : 100 , \"height\" : 100 } ) ; ",
  "engineId": "3b3e4a3b-d382-4e98-9950-9b4e8b308c1c"
}