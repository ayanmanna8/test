{
  "layout": "panel",
  "rdbmsId": "f6ba5938-ef1b-4430-b7b0-261d1cc8174d",
  "hidden": true,
  "insightName": "Inventory Insights 031720 03 - 0",
  "recipe": "AddPanel ( 0 ) ;Panel ( 0 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"STANDARD\" , \"opacity\" : 100 } } ] ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003e(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif((IsEmpty(\u003cSelectedValues\u003e)),(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e)), (\u003cFrame\u003e | SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e)));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Panel ( 0 ) | SetPanelView ( \"federate-view\" , \"\u003cencode\u003e{\"app_id\":\"3b3e4a3b-d382-4e98-9950-9b4e8b308c1c\"}\u003c/encode\u003e\" ) ;CreateFrame ( GRID ) .as ( [ \u0027FRAME165448\u0027 ] ) ;Database ( database \u003d [ \"3b3e4a3b-d382-4e98-9950-9b4e8b308c1c\" ] ) | Query ( \"\u003cencode\u003eselect * from server_details sd\n    left outer join operating_systems ops on ops.ID \u003d sd.operating_system_ID\nleft outer join platforms plt on plt.ID \u003d sd.platform_ID \nleft outer join server_environment_master env on env.ID \u003d sd.environment_ID\u003c/encode\u003e\" ) | Import ( frame \u003d [ FRAME165448 ] ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Frame ( frame \u003d [ FRAME165448 ] ) | QueryAll ( ) | AutoTaskOptions ( panel \u003d [ \"0\" ] , layout \u003d [ \"Grid\" ] ) | Collect ( 2000 ) ;Panel ( 0 ) | SetPanelView ( \"federate-view\" ) ;Panel ( 0 ) | SetPanelView ( \"pipeline\" ) ;Database ( database \u003d [ \"66412649-fdfb-4d80-bdbf-3f5f7ef2b9b1\" ] ) | Select ( LOCATION_1__Lat , LOCATION_1__Long , LOCATION_1__Location ) .as ( [ Lat , Long , Location ] ) | Import ( frame \u003d [ CreateFrame ( frameType \u003d [ GRID ] , override \u003d [ false ] ) .as ( [ \"FRAME951665\" ] ) ] ) ;Frame ( FRAME165448 ) | Select ( FRAME165448__auth_profile , FRAME165448__business_application , FRAME165448__created_by , FRAME165448__created_date , FRAME165448__DATABASE_CREDENTIAL_ID , FRAME165448__DESCRIPTION , FRAME165448__DISPLAY_NAME , FRAME165448__ENDPOINT_URL , FRAME165448__ENVIRONMENT , FRAME165448__environment_ID , FRAME165448__hostname , FRAME165448__ID , FRAME165448__ID_1 , FRAME165448__ID_2 , FRAME165448__ID_3 , FRAME165448__INFRASTRUCTURE , FRAME165448__IS_ACTIVE , FRAME165448__is_deleted , FRAME165448__Is_Manual , FRAME165448__location , FRAME165448__mapping_source_server_ID , FRAME165448__modified_by , FRAME165448__modified_date , FRAME165448__move_group_id , FRAME165448__OPERATING_SYSTEM , FRAME165448__OPERATING_SYSTEMS_IMAGE , FRAME165448__operating_system_ID , FRAME165448__output_path , FRAME165448__PLATFORM , FRAME165448__platform_ID , FRAME165448__PLATFORM_IMAGE , FRAME165448__reparse_requested , FRAME165448__report_run_date , FRAME165448__report_run_end_date , FRAME165448__server_ip , FRAME165448__storagetemplate_ID , FRAME165448__type , FRAME165448__validation_status_ID ) .as ( [ auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , location , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ] ) | Merge ( joins \u003d [ ( Location , right.outer.join , location ) ] , frame \u003d [ FRAME951665 ] ) ;RemoveFrame ( \"FRAME165448\" ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Frame ( frame \u003d [ FRAME951665 ] ) | QueryAll ( ) | AutoTaskOptions ( panel \u003d [ \"0\" ] , layout \u003d [ \"Grid\" ] ) | Collect ( 2000 ) ;FRAME951665 | Convert ( frameType \u003d [ R ] ) .as ( [ \u0027FRAME951665\u0027 ] ) ;Frame ( frame \u003d [ FRAME951665 ] ) | Select ( auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , Lat , Location , Long , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ) .as ( [ auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , Lat , Location , Long , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"auth_profile\" , \"business_application\" , \"created_by\" , \"created_date\" , \"DATABASE_CREDENTIAL_ID\" , \"DESCRIPTION\" , \"DISPLAY_NAME\" , \"ENDPOINT_URL\" , \"ENVIRONMENT\" , \"environment_ID\" , \"hostname\" , \"ID\" , \"ID_1\" , \"ID_2\" , \"ID_3\" , \"INFRASTRUCTURE\" , \"IS_ACTIVE\" , \"is_deleted\" , \"Is_Manual\" , \"Lat\" , \"Location\" , \"Long\" , \"mapping_source_server_ID\" , \"modified_by\" , \"modified_date\" , \"move_group_id\" , \"OPERATING_SYSTEM\" , \"OPERATING_SYSTEMS_IMAGE\" , \"operating_system_ID\" , \"output_path\" , \"PLATFORM\" , \"platform_ID\" , \"PLATFORM_IMAGE\" , \"reparse_requested\" , \"report_run_date\" , \"report_run_end_date\" , \"server_ip\" , \"storagetemplate_ID\" , \"type\" , \"validation_status_ID\" ] } } } ) | Collect ( 2000 ) ;FRAME951665 | DropRows ( qs \u003d [ Filter ( is_deleted \u003d\u003d \"1\" ) ] ) ;ifError ( ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , Lat , Location , Long , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ) .as ( [ auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , Lat , Location , Long , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"auth_profile\" , \"business_application\" , \"created_by\" , \"created_date\" , \"DATABASE_CREDENTIAL_ID\" , \"DESCRIPTION\" , \"DISPLAY_NAME\" , \"ENDPOINT_URL\" , \"ENVIRONMENT\" , \"environment_ID\" , \"hostname\" , \"ID\" , \"ID_1\" , \"ID_2\" , \"ID_3\" , \"INFRASTRUCTURE\" , \"IS_ACTIVE\" , \"is_deleted\" , \"Is_Manual\" , \"Lat\" , \"Location\" , \"Long\" , \"mapping_source_server_ID\" , \"modified_by\" , \"modified_date\" , \"move_group_id\" , \"OPERATING_SYSTEM\" , \"OPERATING_SYSTEMS_IMAGE\" , \"operating_system_ID\" , \"output_path\" , \"PLATFORM\" , \"platform_ID\" , \"PLATFORM_IMAGE\" , \"reparse_requested\" , \"report_run_date\" , \"report_run_end_date\" , \"server_ip\" , \"storagetemplate_ID\" , \"type\" , \"validation_status_ID\" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;FRAME951665 | UpdateRowValues ( Lat , \"0\" , Filter ( Location \u003d\u003d \"\" ) ) ;FRAME951665 | UpdateRowValues ( Long , \"0\" , Filter ( Location \u003d\u003d \"\" ) ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"standard\"}\u003c/encode\u003e\" ) ;if ( ( FRAME951665 | HasDuplicates ( Location ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( Location , Average ( Lat ) , Average ( Long ) ) .as ( [ Location , Average_of_Lat , Average_of_Long ] ) | Group ( Location ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Average_of_Lat\" ] , \"longitude\" : [ \"Average_of_Long\" ] , \"size\" : [ ] , \"color\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( Location , Lat , Long ) .as ( [ Location , Lat , Long ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Lat\" ] , \"longitude\" : [ \"Long\" ] , \"size\" : [ ] , \"color\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) ) ;if ( ( FRAME951665 | HasDuplicates ( Location ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( Location , Average ( Lat ) , Average ( Long ) , Count ( server_ip ) ) .as ( [ Location , Average_of_Lat , Average_of_Long , Count_of_server_ip ] ) | Group ( Location ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Average_of_Lat\" ] , \"longitude\" : [ \"Average_of_Long\" ] , \"size\" : [ \"Count_of_server_ip\" ] , \"color\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( Location , Lat , Long , Count ( server_ip ) ) .as ( [ Location , Lat , Long , Count_of_server_ip ] ) | Group ( Location ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Lat\" ] , \"longitude\" : [ \"Long\" ] , \"size\" : [ \"Count_of_server_ip\" ] , \"color\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) ) ;if ( ( FRAME951665 | HasDuplicates ( Location ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( Location , Average ( Lat ) , Average ( Long ) , UniqueCount ( server_ip ) ) .as ( [ Location , Average_of_Lat , Average_of_Long , Unique_Count_of_server_ip ] ) | Group ( Location ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Average_of_Lat\" ] , \"longitude\" : [ \"Average_of_Long\" ] , \"size\" : [ \"Unique_Count_of_server_ip\" ] , \"color\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( Location , Lat , Long , Count ( server_ip ) ) .as ( [ Location , Lat , Long , Count_of_server_ip ] ) | Group ( Location ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Location\" ] , \"latitude\" : [ \"Lat\" ] , \"longitude\" : [ \"Long\" ] , \"size\" : [ \"Count_of_server_ip\" ] , \"color\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) ) ;Panel ( 0 ) | SetPanelLabel ( \"Server Inventory by Location\" ) ;Panel ( 0 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 0 , \"width\" : 100 , \"height\" : 100 } ) ;Panel ( 0 ) | AddPanelEvents ( { \"onBrush\" : { \"Filter\" : [ { \"default\" : true , \"query\" : \"if((IsEmpty(\u003cSelectedValues\u003e)),(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e)), (\u003cFrame\u003e | SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e)));\" , \"options\" : { } , \"refresh\" : false , \"disabled\" : true , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onDoubleClick\" : { \"Double-click to filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003e\u003cFrame\u003e | SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | Clone ( \"1\" ) ;Panel ( 1 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;if ( ( FRAME951665 | HasDuplicates ( OPERATING_SYSTEM ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( OPERATING_SYSTEM , Count ( server_ip ) ) .as ( [ OPERATING_SYSTEM , Count_of_server_ip ] ) | Group ( OPERATING_SYSTEM ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"OPERATING_SYSTEM\" ] , \"value\" : [ \"Count_of_server_ip\" ] , \"heat\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( OPERATING_SYSTEM , Count ( server_ip ) ) .as ( [ OPERATING_SYSTEM , Count_of_server_ip ] ) | Group ( OPERATING_SYSTEM ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"OPERATING_SYSTEM\" ] , \"value\" : [ \"Count_of_server_ip\" ] , \"heat\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) ) ;Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleDonut\" : true } } } ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools.shared.toggleDonut\" ) ;Panel ( 1 ) | Clone ( \"2\" ) ;if ( ( FRAME951665 | HasDuplicates ( ENVIRONMENT ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( ENVIRONMENT , Count ( server_ip ) ) .as ( [ ENVIRONMENT , Count_of_server_ip ] ) | Group ( ENVIRONMENT ) | With ( Panel ( 2 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"2\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"ENVIRONMENT\" ] , \"value\" : [ \"Count_of_server_ip\" ] , \"heat\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( ENVIRONMENT , Count ( server_ip ) ) .as ( [ ENVIRONMENT , Count_of_server_ip ] ) | Group ( ENVIRONMENT ) | With ( Panel ( 2 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"2\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"ENVIRONMENT\" ] , \"value\" : [ \"Count_of_server_ip\" ] , \"heat\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) ) ;Panel ( 2 ) | Clone ( \"3\" ) ;if ( ( FRAME951665 | HasDuplicates ( DISPLAY_NAME ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( DISPLAY_NAME , Count ( server_ip ) ) .as ( [ DISPLAY_NAME , Count_of_server_ip ] ) | Group ( DISPLAY_NAME ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"DISPLAY_NAME\" ] , \"value\" : [ \"Count_of_server_ip\" ] , \"heat\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( DISPLAY_NAME , Count ( server_ip ) ) .as ( [ DISPLAY_NAME , Count_of_server_ip ] ) | Group ( DISPLAY_NAME ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"DISPLAY_NAME\" ] , \"value\" : [ \"Count_of_server_ip\" ] , \"heat\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) ) ;Panel ( 3 ) | Clone ( \"4\" ) ;if ( ( FRAME951665 | HasDuplicates ( business_application ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( business_application , Count ( server_ip ) ) .as ( [ business_application , Count_of_server_ip ] ) | Group ( business_application ) | With ( Panel ( 4 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"4\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"business_application\" ] , \"value\" : [ \"Count_of_server_ip\" ] , \"heat\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( business_application , Count ( server_ip ) ) .as ( [ business_application , Count_of_server_ip ] ) | Group ( business_application ) | With ( Panel ( 4 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"4\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"business_application\" ] , \"value\" : [ \"Count_of_server_ip\" ] , \"heat\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) ) ;Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Semoss\" , \"color\" : { } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"One\" , \"color\" : { } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 3 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Semoss\" , \"color\" : { } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 3 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 3 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"One\" , \"color\" : { } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 3 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 1 ) | SetPanelLabel ( \"Server Inventory by OS Type\" ) ;Panel ( 2 ) | SetPanelLabel ( \"Server Inventory by Environment\" ) ;Panel ( 3 ) | SetPanelLabel ( \"Server Inventory by Platform\" ) ;Panel ( 4 ) | SetPanelLabel ( \"Server Inventory by Business Application\" ) ;Frame ( frame \u003d [ FRAME951665 ] ) | Select ( auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , Lat , Location , Long , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ) .as ( [ auth_profile , business_application , created_by , created_date , DATABASE_CREDENTIAL_ID , DESCRIPTION , DISPLAY_NAME , ENDPOINT_URL , ENVIRONMENT , environment_ID , hostname , ID , ID_1 , ID_2 , ID_3 , INFRASTRUCTURE , IS_ACTIVE , is_deleted , Is_Manual , Lat , Location , Long , mapping_source_server_ID , modified_by , modified_date , move_group_id , OPERATING_SYSTEM , OPERATING_SYSTEMS_IMAGE , operating_system_ID , output_path , PLATFORM , platform_ID , PLATFORM_IMAGE , reparse_requested , report_run_date , report_run_end_date , server_ip , storagetemplate_ID , type , validation_status_ID ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"4\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"auth_profile\" , \"business_application\" , \"created_by\" , \"created_date\" , \"DATABASE_CREDENTIAL_ID\" , \"DESCRIPTION\" , \"DISPLAY_NAME\" , \"ENDPOINT_URL\" , \"ENVIRONMENT\" , \"environment_ID\" , \"hostname\" , \"ID\" , \"ID_1\" , \"ID_2\" , \"ID_3\" , \"INFRASTRUCTURE\" , \"IS_ACTIVE\" , \"is_deleted\" , \"Is_Manual\" , \"Lat\" , \"Location\" , \"Long\" , \"mapping_source_server_ID\" , \"modified_by\" , \"modified_date\" , \"move_group_id\" , \"OPERATING_SYSTEM\" , \"OPERATING_SYSTEMS_IMAGE\" , \"operating_system_ID\" , \"output_path\" , \"PLATFORM\" , \"platform_ID\" , \"PLATFORM_IMAGE\" , \"reparse_requested\" , \"report_run_date\" , \"report_run_end_date\" , \"server_ip\" , \"storagetemplate_ID\" , \"type\" , \"validation_status_ID\" ] } } } ) | Collect ( 2000 ) ;FRAME951665 | UpdateRowValues ( business_application , \"null\" , Filter ( business_application \u003d\u003d \"\" ) ) ;if ( ( FRAME951665 | HasDuplicates ( business_application ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( business_application , Count ( server_ip ) ) .as ( [ business_application , Count_of_server_ip ] ) | Group ( business_application ) | With ( Panel ( 4 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"4\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"business_application\" ] , \"value\" : [ \"Count_of_server_ip\" ] , \"heat\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( frame \u003d [ FRAME951665 ] ) | Select ( business_application , Count ( server_ip ) ) .as ( [ business_application , Count_of_server_ip ] ) | Group ( business_application ) | With ( Panel ( 4 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"4\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"business_application\" ] , \"value\" : [ \"Count_of_server_ip\" ] , \"heat\" : [ ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) ) ;Panel ( 0 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 0 , \"width\" : 33 . 333 , \"height\" : 50 } ) ;Panel ( 1 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 33 . 30930064888248 , \"width\" : 33 . 38139870223504 , \"height\" : 50 . 04574565416286 } ) ;Panel ( 2 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 66 . 69069935111752 , \"width\" : 33 . 30930064888248 , \"height\" : 50 . 04574565416286 } ) ;Panel ( 3 ) | SetPanelPosition ( { \"top\" : 50 . 04574565416286 , \"left\" : 0 , \"width\" : 50 . 036049026676274 , \"height\" : 49 . 95425434583714 } ) ;Panel ( 4 ) | SetPanelPosition ( { \"top\" : 50 , \"left\" : 50 , \"width\" : 50 , \"height\" : 50 } ) ;Panel ( 2 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"One\" , \"color\" : { } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 2 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 2 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Semoss\" , \"color\" : { } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 2 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 4 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"One\" , \"color\" : { } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 4 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 4 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Semoss\" , \"color\" : { } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 4 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 0 , \"width\" : 33 . 333 , \"height\" : 50 } ) ;Panel ( 1 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 33 . 30930064888248 , \"width\" : 33 . 38139870223504 , \"height\" : 50 . 04574565416286 } ) ;Panel ( 2 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 66 . 69069935111752 , \"width\" : 33 . 30930064888248 , \"height\" : 50 . 04574565416286 } ) ;Panel ( 3 ) | SetPanelPosition ( { \"top\" : 50 . 04574565416286 , \"left\" : 0 , \"width\" : 50 . 036049026676274 , \"height\" : 49 . 95425434583714 } ) ;Panel ( 4 ) | SetPanelPosition ( { \"top\" : 50 , \"left\" : 50 , \"width\" : 50 , \"height\" : 50 } ) ;Panel ( 4 ) | Clone ( \"5\" ) ;Panel ( 5 ) | SetPanelView ( \"text-widget\" ) ;Panel ( 5 ) | SetPanelView ( \"text-widget\" , \"\u003cencode\u003e{\"html\":\"\u003cbody\u003e\\n    \u003c!-- Change QueryAll() to a select statement if you do not want all headers in your default frame --\u003e\\n    \u003cbutton class\u003d\\\"atabutton\\\" ng-click\u003d\\\"textWidget.runPixel(\u0027Frame (frame\u003d[FRAME951665]) | Select ( server_ip, Location, OPERATING_SYSTEM, ENVIRONMENT, DISPLAY_NAME, business_application ) .as ( [Host_IP, Location, OS_Type, Environment, Platform, Business_Application] ) | Group (server_ip ) | ToCsv ( );\u0027)\\\" type\u003d\\\"button\\\" style\u003d\\\"vertical-align:middle\\\" \u003e\\n        \u003cspan\u003e\u003ci class\u003d\\\"fa fa-download\\\" aria-hidden\u003d\\\"true\\\"\u003e\u003c/i\u003e        Download\u003c/span\u003e\\n    \u003c/button\u003e\\n\u003c/body\u003e\\n\u003cstyle\u003e\\n    #TextWidget{\\n        --button-background-color: #143F5B;\\n        --button-text-color: #ffffff;\\n           font-weight: bold;\\n    }\\n    #TextWidget .atabutton{\\n    display: inline-block;\\n    border-radius: 4px;\\n    background-color: var(--button-background-color);\\n    border: none;\\n    color: var(--button-text-color);\\n    text-align: center;\\n    transition: all 0.5s;\\n    cursor: pointer;\\n    margin: 5px; \\n    height: 100%;\\n    width: 100%;\\n    }\\n\\n    #TextWidget .button span{\\n    cursor: pointer;\\n    display: inline-block;\\n    position: relative;\\n    transition: 0.5s;\\n    }\\n\\n    #TextWidget .button span:after{\\n    content: \u0027\\\\00bb\u0027;\\n    position: absolute;\\n    opacity: 0;\\n    top: 0;\\n    right: -20px;\\n    transition: 0.5s;\\n    }\\n\\n    #TextWidget .button:hover span{\\n    padding-right: 25px;\\n    }\\n\\n    #TextWidget .button:hover span:after{\\n    opacity: 1;\\n    right: 0;\\n    }\\n\u003c/style\u003e\",\"varList\":[{\"name\":\"FRAMEDATA\",\"query\":\"Panel ( 0 ) | SetPanelView ( \\\"text-widget\\\" , \\\"\u003cencode\u003e{\\\"html\\\":\\\"\u003cbody\u003e\\\\n    \u003c!-- Change QueryAll() to a select statement if you do not want all headers in your default frame --\u003e\\\\n    \u003cbutton class\u003d\\\\\\\"button\\\\\\\" ng-click\u003d\\\\\\\"textWidget.runPixel(\u0027Frame (frame\u003d[FRAME951665]) |  Select ( server_ip, Location, OPERATING_SYSTEM, ENVIRONMENT, DISPLAY_NAME, business_application) .as ( [ Host_IP, Location, OS_Type, Environment, Platform, Business_Application ] ) | Group ( server_ip ) | ToCsv ( );\u0027)\\\\\\\" type\u003d\\\\\\\"button\\\\\\\" style\u003d\\\\\\\"vertical-align:middle\\\\\\\" \u003e\\\\n        \u003cspan\u003eDownload\u003c/span\u003e\\\\n    \u003c/button\u003e\\\\n\u003c/body\u003e\\\\n\u003cstyle\u003e\\\\n    #TextWidget {\\\\n        --button-background-color: #143F5B;\\\\n        --button-text-color: #ffffff;\\\\n    }\\\\n    #TextWidget .button{\\\\n    display: inline-block;\\\\n    border-radius: 4px;\\\\n    background-color: var(--button-background-color);\\\\n    border: none;\\\\n    color: var(--button-text-color);\\\\n    text-align: center;\\\\n    font-size: 28px;\\\\n    padding: 20px;\\\\n    width: 100%;\\\\n    transition: all 0.5s;\\\\n    cursor: pointer;\\\\n    margin: 5px;\\\\n    }\\\\n\\\\n    #TextWidget .button span{\\\\n    cursor: pointer;\\\\n    display: inline-block;\\\\n    position: relative;\\\\n    transition: 0.5s;\\\\n    }\\\\n\\\\n    #TextWidget .button span:after{\\\\n    content: \u0027\\\\\\\\00bb\u0027;\\\\n    position: absolute;\\\\n    opacity: 0;\\\\n    top: 0;\\\\n    right: -20px;\\\\n    transition: 0.5s;\\\\n    }\\\\n\\\\n    #TextWidget .button:hover span{\\\\n    padding-right: 25px;\\\\n    }\\\\n\\\\n    #TextWidget .button:hover span:after{\\\\n    opacity: 1;\\\\n    right: 0;\\\\n    }\\\\n\u003c/style\u003e\\\",\\\"varList\\\":[{\\\"name\\\":\\\"\\\",\\\"query\\\":\\\"\\\"}],\\\"freeze\\\":false,\\\"loading\\\":true}\u003c/encode\u003e\\\" ) ;\"}],\"freeze\":false,\"loading\":true}\u003c/encode\u003e\" ) ;Panel ( 5 ) | SetPanelLabel ( \"\" ) ;Panel ( 5 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"opacity\" : 100 , \"type\" : \"STANDARD\" , \"backgroundColor\" : \"#FFFFFF\" , \"transparent\" : true , \"zIndex\" : 1 , \"hideBorders\" : true } } ] ) ;Panel ( 5 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"watermark\" : \"\" , \"backgroundColor\" : \"#FFFFFF\" , \"transparentPanel\" : true } } } ) ;Panel ( 5 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel(0)|SetPanelPosition({\"top\":0,\"left\":0,\"width\":35,\"height\":45});Panel(1)|SetPanelPosition({\"top\":0,\"left\":35,\"width\":30,\"height\":45});Panel(2)|SetPanelPosition({\"top\":0,\"left\":65,\"width\":35,\"height\":45});Panel(3)|SetPanelPosition({\"top\":45,\"left\":0,\"width\":50,\"height\":45});Panel(4)|SetPanelPosition({\"top\":45,\"left\":50,\"width\":50,\"height\":45});Panel(5)|SetPanelPosition({\"top\":90,\"left\":0,\"width\":100,\"height\":10});",
  "engineId": "3b3e4a3b-d382-4e98-9950-9b4e8b308c1c"
}