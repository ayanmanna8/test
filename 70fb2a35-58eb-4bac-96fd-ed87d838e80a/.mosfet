{
  "engineId": "3b3e4a3b-d382-4e98-9950-9b4e8b308c1c",
  "rdbmsId": "70fb2a35-58eb-4bac-96fd-ed87d838e80a",
  "insightName": "Affinity Network Graph - 0",
  "layout": "panel",
  "hidden": true,
  "recipe": [
    "AddPanel ( 0 ) ;",
    "Panel ( 0 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"STANDARD\" , \"opacity\" : 100 } } ] ) ;",
    "Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003e(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif((IsEmpty(\u003cSelectedValues\u003e)),(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e)), (\u003cFrame\u003e | SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e)));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ;",
    "Panel ( 0 ) | RetrievePanelEvents ( ) ;",
    "Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 0 ) | SetPanelView ( \"pipeline\" , \"\u003cencode\u003e{\"app_id\":\"3b3e4a3b-d382-4e98-9950-9b4e8b308c1c\"}\u003c/encode\u003e\" ) ;",
    "AddPanel ( 0 ) ;",
    "Panel ( 0 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"STANDARD\" , \"opacity\" : 100 } } ] ) ;",
    "Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003e(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif((IsEmpty(\u003cSelectedValues\u003e)),(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e)), (\u003cFrame\u003e | SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e)));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ;",
    "Panel ( 0 ) | RetrievePanelEvents ( ) ;",
    "Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 0 ) | SetPanelView ( \"pipeline\" , \"\u003cencode\u003e{\"app_id\":\"3b3e4a3b-d382-4e98-9950-9b4e8b308c1c\"}\u003c/encode\u003e\" ) ;",
    "AddPanel ( 0 ) ;",
    "Panel ( 0 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"STANDARD\" , \"opacity\" : 100 } } ] ) ;",
    "Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003e(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif((IsEmpty(\u003cSelectedValues\u003e)),(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e)), (\u003cFrame\u003e | SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e)));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ;",
    "Panel ( 0 ) | RetrievePanelEvents ( ) ;",
    "Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 0 ) | SetPanelView ( \"pipeline\" , \"\u003cencode\u003e{\"app_id\":\"3b3e4a3b-d382-4e98-9950-9b4e8b308c1c\"}\u003c/encode\u003e\" ) ;",
    "Database ( database \u003d [ \"3b3e4a3b-d382-4e98-9950-9b4e8b308c1c\" ] ) | Query ( \"\u003cencode\u003eSELECT server_ip as \u0027Source\u0027,remote_ip as \u0027Target\u0027,connectionDirection as \u0027ConnectionDirection\u0027,port_used as \u0027SourcePort\u0027,remote_port as \u0027RemotePort\u0027,business_application as \u0027SourceBA\u0027,\r\nremote_business_application as \u0027TargetBA\u0027,protocol as \u0027Protocol\u0027,subnet as \u0027Subnet\u0027,environment as\u0027Environment\u0027,location as \u0027Location\u0027 FROM atadata_db.affinityview where connectionDirection\u003d \"Outbound\" or connectionDirection\u003d\"Internal\"\r\nunion\r\nSELECT remote_ip as \u0027Source\u0027,server_ip as \u0027Target\u0027,connectionDirection as \u0027ConnectionDirection\u0027,remote_port as \u0027SourcePort\u0027,port_used as \u0027RemotePort\u0027,remote_business_application as \u0027SourceBA\u0027,\r\nbusiness_application as \u0027TargetBA\u0027,protocol as \u0027Protocol\u0027,subnet as \u0027Subnet\u0027,environment as\u0027Environment\u0027,location as \u0027Location\u0027 FROM atadata_db.affinityview where connectionDirection\u003d \"Inbound\"\u003c/encode\u003e\" ) | Import ( frame \u003d [ CreateFrame ( frameType \u003d [ R ] , override \u003d [ true ] ) .as ( [ \"AFFINITYGRAPHFRAME\" ] ) ] ) ;",
    "AFFINITYGRAPHFRAME | SplitUnpivot ( columns \u003d [ \"SourcePort\" ] , delimiter \u003d [ \";\" ] ) ;",
    "AFFINITYGRAPHFRAME | SplitUnpivot ( columns \u003d [ \"RemotePort\" ] , delimiter \u003d [ \";\" ] ) ;",
    "AFFINITYGRAPHFRAME | ReplaceColumnValue ( column \u003d [ \"SourceBA\" ] , value \u003d [ \"\" ] , newValue \u003d [ \"Unknown\" ] ) ;",
    "AFFINITYGRAPHFRAME | UpdateRowValues ( SourceBA , \"Unknown\" , Filter ( SourceBA \u003d\u003d \"null\" ) ) ;",
    "AFFINITYGRAPHFRAME | ReplaceColumnValue ( column \u003d [ \"TargetBA\" ] , value \u003d [ \"\" ] , newValue \u003d [ \"Unknown\" ] ) ;",
    "AFFINITYGRAPHFRAME | UpdateRowValues ( TargetBA , \"Unknown\" , Filter ( TargetBA \u003d\u003d \"null\" ) ) ;",
    "AFFINITYGRAPHFRAME | ReplaceColumnValue ( column \u003d [ \"Subnet\" ] , value \u003d [ \"\" ] , newValue \u003d [ \"Unknown\" ] ) ;",
    "AFFINITYGRAPHFRAME | UpdateRowValues ( Subnet , \"Unknown\" , Filter ( Subnet \u003d\u003d \"null\" ) ) ;",
    "AFFINITYGRAPHFRAME | ReplaceColumnValue ( column \u003d [ \"Location\" ] , value \u003d [ \"\" ] , newValue \u003d [ \"Unknown\" ] ) ;",
    "AFFINITYGRAPHFRAME | UpdateRowValues ( Environment , \"Unknown\" , Filter ( Environment \u003d\u003d \"null\" ) ) ;",
    "AFFINITYGRAPHFRAME | ChangeColumnType ( column \u003d [ SourcePort ] , dataType \u003d [ \"NUMBER\" ] ) ;",
    "AFFINITYGRAPHFRAME | ChangeColumnType ( column \u003d [ RemotePort ] , dataType \u003d [ \"NUMBER\" ] ) ;",
    "Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"standard\"}\u003c/encode\u003e\" ) ;",
    "Frame ( frame \u003d [ AFFINITYGRAPHFRAME ] ) | Select ( Source , Target ) .as ( [ source , target ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027graph\u0027 ] , options \u003d [ { \"connections\" : \"source.target;\" , \"alias\" : \"source.Hosts;target.Hosts\" , \"color\" : \"FF8C00\" } ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Graph\" , \"alignment\" : { \"start\" : [ \"source\" ] , \"end\" : [ \"target\" ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ;",
    "Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;",
    "AddPanel ( 1 ) ;",
    "Panel ( 1 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"COLLAPSIBLE\" , \"opacity\" : 100 , \"subType\" : \"\" } } ] ) ;",
    "Panel ( 1 ) | SetPanelView ( \"DashboardFilter\" , \"\u003cencode\u003e{\"autoRun\":true,\"frame\":\"AFFINITYGRAPHFRAME\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 1 ) | AddPanelOrnaments ( { \"dashboardFilter\" : { \"singleSelect\" : \"Multi Select\" , \"viewType\" : \"List\" , \"instances\" : [ \"Source\" ] } } ) | RetrievePanelOrnaments ( \"dashboardFilter\" ) ;",
    "AddPanel ( 2 ) ;",
    "Panel ( 2 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"STANDARD\" , \"subType\" : \"UNFILTER\" , \"opacity\" : 100 , \"labelOverride\" : true , \"panelLabel\" : \"Unfilter Sheet\" , \"zIndex\" : 4 } } ] ) ;",
    "Panel ( 2 ) | SetPanelView ( \"unfilter-sheet\" ) ;",
    "AddPanel ( 3 ) ;",
    "Panel ( 3 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"COLLAPSIBLE\" , \"opacity\" : 100 , \"subType\" : \"\" } } ] ) ;",
    "Panel ( 3 ) | SetPanelView ( \"DashboardFilter\" , \"\u003cencode\u003e{\"autoRun\":true,\"frame\":\"AFFINITYGRAPHFRAME\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 3 ) | AddPanelOrnaments ( { \"dashboardFilter\" : { \"singleSelect\" : \"Multi Select\" , \"viewType\" : \"List\" , \"instances\" : [ \"Target\" ] } } ) | RetrievePanelOrnaments ( \"dashboardFilter\" ) ;",
    "AddPanel ( 4 ) ;",
    "Panel ( 4 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"COLLAPSIBLE\" , \"opacity\" : 100 , \"subType\" : \"\" } } ] ) ;",
    "Panel ( 4 ) | SetPanelView ( \"DashboardFilter\" , \"\u003cencode\u003e{\"autoRun\":true,\"frame\":\"AFFINITYGRAPHFRAME\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 4 ) | AddPanelOrnaments ( { \"dashboardFilter\" : { \"singleSelect\" : \"Multi Select\" , \"viewType\" : \"List\" , \"instances\" : [ \"SourcePort\" ] } } ) | RetrievePanelOrnaments ( \"dashboardFilter\" ) ;",
    "AddPanel ( 5 ) ;",
    "Panel ( 5 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"COLLAPSIBLE\" , \"opacity\" : 100 , \"subType\" : \"\" } } ] ) ;",
    "Panel ( 5 ) | SetPanelView ( \"DashboardFilter\" , \"\u003cencode\u003e{\"autoRun\":true,\"frame\":\"AFFINITYGRAPHFRAME\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 5 ) | AddPanelOrnaments ( { \"dashboardFilter\" : { \"singleSelect\" : \"Multi Select\" , \"viewType\" : \"List\" , \"instances\" : [ \"RemotePort\" ] } } ) | RetrievePanelOrnaments ( \"dashboardFilter\" ) ;",
    "AddPanel ( 6 ) ;",
    "Panel ( 6 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"COLLAPSIBLE\" , \"opacity\" : 100 , \"subType\" : \"\" } } ] ) ;",
    "Panel ( 6 ) | SetPanelView ( \"DashboardFilter\" , \"\u003cencode\u003e{\"autoRun\":true,\"frame\":\"AFFINITYGRAPHFRAME\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 6 ) | AddPanelOrnaments ( { \"dashboardFilter\" : { \"singleSelect\" : \"Multi Select\" , \"viewType\" : \"List\" , \"instances\" : [ \"Protocol\" ] } } ) | RetrievePanelOrnaments ( \"dashboardFilter\" ) ;",
    "AddPanel ( 7 ) ;",
    "Panel ( 7 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"COLLAPSIBLE\" , \"opacity\" : 100 , \"subType\" : \"\" } } ] ) ;",
    "Panel ( 7 ) | SetPanelView ( \"DashboardFilter\" , \"\u003cencode\u003e{\"autoRun\":true,\"frame\":\"AFFINITYGRAPHFRAME\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 7 ) | AddPanelOrnaments ( { \"dashboardFilter\" : { \"singleSelect\" : \"Multi Select\" , \"viewType\" : \"List\" , \"instances\" : [ \"Location\" ] } } ) | RetrievePanelOrnaments ( \"dashboardFilter\" ) ;",
    "AddPanel ( 8 ) ;",
    "Panel ( 8 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"COLLAPSIBLE\" , \"opacity\" : 100 , \"subType\" : \"\" } } ] ) ;",
    "Panel ( 8 ) | SetPanelView ( \"DashboardFilter\" , \"\u003cencode\u003e{\"autoRun\":true,\"frame\":\"AFFINITYGRAPHFRAME\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 8 ) | AddPanelOrnaments ( { \"dashboardFilter\" : { \"singleSelect\" : \"Multi Select\" , \"viewType\" : \"List\" , \"instances\" : [ \"SourceBA\" ] } } ) | RetrievePanelOrnaments ( \"dashboardFilter\" ) ;",
    "AddPanel ( 9 ) ;",
    "Panel ( 9 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"COLLAPSIBLE\" , \"opacity\" : 100 , \"subType\" : \"\" } } ] ) ;",
    "Panel ( 9 ) | SetPanelView ( \"DashboardFilter\" , \"\u003cencode\u003e{\"autoRun\":true,\"frame\":\"AFFINITYGRAPHFRAME\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 9 ) | AddPanelOrnaments ( { \"dashboardFilter\" : { \"singleSelect\" : \"Multi Select\" , \"viewType\" : \"List\" , \"instances\" : [ \"TargetBA\" ] } } ) | RetrievePanelOrnaments ( \"dashboardFilter\" ) ;",
    "AddPanel ( 10 ) ;",
    "Panel ( 10 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"COLLAPSIBLE\" , \"opacity\" : 100 , \"subType\" : \"\" } } ] ) ;",
    "Panel ( 10 ) | SetPanelView ( \"DashboardFilter\" , \"\u003cencode\u003e{\"autoRun\":true,\"frame\":\"AFFINITYGRAPHFRAME\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 10 ) | AddPanelOrnaments ( { \"dashboardFilter\" : { \"singleSelect\" : \"Multi Select\" , \"viewType\" : \"List\" , \"instances\" : [ \"Subnet\" ] } } ) | RetrievePanelOrnaments ( \"dashboardFilter\" ) ;",
    "AddPanel ( 11 ) ;",
    "Panel ( 11 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"COLLAPSIBLE\" , \"opacity\" : 100 , \"subType\" : \"\" } } ] ) ;",
    "Panel ( 11 ) | SetPanelView ( \"DashboardFilter\" , \"\u003cencode\u003e{\"autoRun\":true,\"frame\":\"AFFINITYGRAPHFRAME\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 11 ) | AddPanelOrnaments ( { \"dashboardFilter\" : { \"singleSelect\" : \"Multi Select\" , \"viewType\" : \"List\" , \"instances\" : [ \"Environment\" ] } } ) | RetrievePanelOrnaments ( \"dashboardFilter\" ) ;",
    "AddPanel ( 15 ) ;",
    "Panel ( 15 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"STANDARD\" , \"opacity\" : 100 } } ] ) ;",
    "Panel ( 15 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003e(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif((IsEmpty(\u003cSelectedValues\u003e)),(\u003cFrame\u003e | UnfilterFrame(\u003cSelectedColumn\u003e)), (\u003cFrame\u003e | SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e)));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ;",
    "Panel ( 15 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"standard\"}\u003c/encode\u003e\" ) ;",
    "Panel ( 15 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Server\" : [ { \"panel\" : \"0\" , \"query\" : \"\u003cencode\u003eAFFINITYGRAPHFRAME | SetFrameFilter(Source\u003d\u003d\u003cSelectedValues\u003e OR Target\u003d\u003d\u003cSelectedValues\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"disabledVisuals\" : [ \"Sunburst\" ] } ] } } ) ;",
    "Database ( database \u003d [ \"3b3e4a3b-d382-4e98-9950-9b4e8b308c1c\" ] ) | Query ( \"\u003cencode\u003eselect distinct server_ip as \u0027Source\u0027 from affinityview where connectionDirection !\u003d \"Unknown\"\u003c/encode\u003e\" ) | Import ( frame \u003d [ CreateFrame ( frameType \u003d [ R ] , override \u003d [ true ] ) .as ( [ \"ServerListFrame\" ] ) ] ) ;",
    "Frame ( frame \u003d [ ServerListFrame ] ) | Select ( Source ) .as ( [ IPs ] ) | With ( Panel ( 15 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"15\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"IPs\" ] } } } ) | Collect ( 2000 ) ;",
    "Panel ( 0 ) | SetPanelLabel ( \"Affinity Network Graph\" ) ;",
    "Panel ( 1 ) | SetPanelLabel ( \"Filter Outbound Connections\" ) ;",
    "Panel ( 3 ) | SetPanelLabel ( \"Filter Inbound Connections\" ) ;",
    "Panel ( 4 ) | SetPanelLabel ( \"Filter Host Port\" ) ;",
    "Panel ( 5 ) | SetPanelLabel ( \"Filter Target Port\" ) ;",
    "Panel ( 6 ) | SetPanelLabel ( \"Filter Protocol\" ) ;",
    "Panel ( 7 ) | SetPanelLabel ( \"Filter Location\" ) ;",
    "Panel ( 8 ) | SetPanelLabel ( \"Filter Host Business Application\" ) ;",
    "Panel ( 9 ) | SetPanelLabel ( \"Filter Target Business Application\" ) ;",
    "Panel ( 10 ) | SetPanelLabel ( \"Filter Subnet\" ) ;",
    "Panel ( 11 ) | SetPanelLabel ( \"Filter Environment\" ) ;",
    "Panel ( 15 ) | SetPanelLabel ( \"IPs\" ) ;",
    "Panel ( 15 ) | SetPanelPosition ( { \"top\" : 15 , \"left\" : 0 . 2 , \"width\" : 12 , \"height\" : 85 } ) ;",
    "Panel ( 0 ) | SetPanelPosition ( { \"top\" : 15 , \"left\" : 12 . 5 , \"width\" : 86 . 5 , \"height\" : 85 } ) ;",
    "cbv_1611765636117 \u003d Frame ( AFFINITYGRAPHFRAME ) | ImplicitFilterOverride ( true ) | Select ( Source ) ;",
    "Panel ( 0 ) | AddPanelColorByValue ( name \u003d [ \"cbv_1611765636117\" ] , qs \u003d [ cbv_1611765636117 ] , options \u003d [ { \"color\" : \"#ff8c00\" , \"colorOn\" : \"Hosts\" , \"valuesColumn\" : \"ConnectionDirection\" } ] ) ;",
    "Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"HostClick\" : [ { \"panel\" : \"0\" , \"query\" : \"AddPanel%20(%2016%20)%20%3B%0D%0APanel%20(%2016%20)%20%7C%20SetPanelLabel%20(%20%3CSelectedValues%3E%20)%3B%0D%0APanel%20(%2016%20)%20%7C%20SetPanelPosition%20(%20%7B%20%22top%22%20%3A%2050%20%2C%20%22left%22%20%3A%2073%20%2C%20%22width%22%20%3A25%20%2C%20%22height%22%20%3A%2050%20%7D%20)%20%3B%0D%0A%0D%0APanel%20(%2016%20)%20%7C%20SetPanelView%20(%20%22visualization%22%20%2C%20%22%3Cencode%3E\u003cencode\u003e{\"type\":\"standard\"}\u003c/encode\u003e%3C%2Fencode%3E%22%20)%20%3B%0D%0ADatabase%20(%20database%20%3D%20%5B%20%223b3e4a3b-d382-4e98-9950-9b4e8b308c1c%22%20%5D%20)%20%7C%20Query%20(%20%22%3Cencode%3Eselect%20sd.SERVER_IP%2Csd.HOSTNAME%2Cos.OPERATING_SYSTEM%2Cp.DISPLAY_NAME%20as%20PLATFORM_NAME%20%2Cpd.CPU_COUNT%2Cpd.CORE_COUNT%2Cpd.THREAD_COUNT%2Cmd.SIZE%20as%20MEMORY_SIZE%20from%20server_details%20sd%20join%20platforms%20p%20on%20sd.platform_ID%3Dp.ID%20join%20processor_details%20pd%20on%20pd.SERVER_ID%3Dsd.ID%20join%20memory_details%20md%20on%20md.SERVER_ID%3Dsd.ID%20join%20operating_systems%20os%20on%20os.ID%3Dsd.operating_system_ID%20where%20sd.is_deleted%3D0%3C%2Fencode%3E%22%20)%20%7C%20Import%20(%20frame%20%3D%20%5B%20CreateFrame%20(%20frameType%20%3D%20%5B%20R%20%5D%20%2C%20override%20%3D%20%5B%20true%20%5D%20)%20.as%20(%20%5B%20%22ServerDetails%22%20%5D%20)%20%5D%20)%20%3B%0D%0AFrame%20(%20frame%20%3D%20%5B%20ServerDetails%20%5D%20)%7C%20SetFrameFilter(SERVER_IP%3D%3D%3CSelectedValues%3E)%3B%0D%0AFrame%20(%20frame%20%3D%20%5B%20ServerDetails%20%5D%20)%20%7C%20Select%20(%20CORE_COUNT%20%2C%20CPU_COUNT%20%2C%20HOSTNAME%20%2C%20OPERATING_SYSTEM%20%2C%20PLATFORM_NAME%20%2C%20MEMORY_SIZE%20%2C%20THREAD_COUNT%20)%20.as%20(%20%5B%20CORE_COUNT%20%2C%20CPU_COUNT%20%2C%20HOSTNAME%20%2C%20OPERATING_SYSTEM%20%2C%20PLATFORM_NAME%20%2C%20%20MEMORY_SIZE%20%2C%20THREAD_COUNT%20%5D%20)%20%7C%20With%20(%20Panel%20(%2016%20)%20)%20%7C%20Format%20(%20type%20%3D%20%5B%20\u0027table\u0027%20%5D%20)%20%7C%20TaskOptions%20(%20%7B%20%2216%22%20%3A%20%7B%20%22layout%22%20%3A%20%22Grid%22%20%2C%20%22alignment%22%20%3A%20%7B%20%22label%22%20%3A%20%5B%22CORE_COUNT%22%20%2C%20%22CPU_COUNT%22%20%2C%20%22HOSTNAME%22%20%2C%20%22OPERATING_SYSTEM%22%20%2C%20%22PLATFORM_NAME%22%20%2C%22MEMORY_SIZE%22%20%2C%20%22THREAD_COUNT%22%20%5D%20%7D%20%7D%20%7D%20)%20%7C%20Collect%20(%202000%20)%20%3B%0D%0APanel%20(%2016%20)%20%7C%20SetPanelView%20(%20%22pipeline%22%20)%20%3B%0D%0A%20ServerDetails%20%7C%20Unpivot%20(%20columns%20%3D%20%5B%22HOSTNAME%22%20%2C%22OPERATING_SYSTEM%22%20%2C%20%22PLATFORM_NAME%22%2C%22CORE_COUNT%22%20%2C%20%22CPU_COUNT%22%20%2C%22THREAD_COUNT%22%2C%20%22MEMORY_SIZE%22%5D%20)%20%3B%0D%0A%7B%22name%22%3A%20%22ServerDetails%22%2C%20%22type%22%3A%20%22R%22%7D%3B%0D%0A%0D%0APanel%20(%2016%20)%20%7C%20SetPanelView%20(%20%22visualization%22%20)%20%3B%0D%0A%0D%0APanel%20(%2016%20)%20%7C%20AddPanelConfig%20(%20config%20%3D%20%5B%20%7B%20%22config%22%20%3A%20%7B%20%22subType%22%20%3A%20%22%22%20%7D%20%7D%20%5D%20)%20%3B%0D%0A%0D%0AFrame%20(%20frame%20%3D%20%5B%20ServerDetails%20%5D%20)%20%7C%20Select%20(%20variable_1%20%2C%20value_1%20)%20.as%20(%20%5B%20Name%20%2C%20value%20%5D%20)%20%7C%20With%20(%20Panel%20(%2016%20)%20)%20%7C%20Format%20(%20type%20%3D%20%5B%20\u0027table\u0027%20%5D%20)%20%7C%20TaskOptions%20(%20%7B%20%2216%22%20%3A%20%7B%20%22layout%22%20%3A%20%22Grid%22%20%2C%20%22alignment%22%20%3A%20%7B%20%22label%22%20%3A%20%5B%20%22Name%22%20%2C%20%22value%22%20%5D%20%7D%20%7D%20%7D%20)%20%7C%20Collect%20(%202000%20)%20%3B\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] } ] } } ) ;",
    "AddPanel ( 16 ) ;",
    "Panel ( 16 ) | SetPanelLabel ( [ \"192.168.98.114\" ] ) ;",
    "Panel ( 16 ) | SetPanelPosition ( { \"top\" : 50 , \"left\" : 73 , \"width\" : 25 , \"height\" : 50 } ) ;",
    "Panel ( 16 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"standard\"}\u003c/encode\u003e\" ) ;",
    "Database ( database \u003d [ \"3b3e4a3b-d382-4e98-9950-9b4e8b308c1c\" ] ) | Query ( \"\u003cencode\u003eselect sd.SERVER_IP,sd.HOSTNAME,os.OPERATING_SYSTEM,p.DISPLAY_NAME as PLATFORM_NAME ,pd.CPU_COUNT,pd.CORE_COUNT,pd.THREAD_COUNT,md.SIZE as MEMORY_SIZE from server_details sd join platforms p on sd.platform_ID\u003dp.ID join processor_details pd on pd.SERVER_ID\u003dsd.ID join memory_details md on md.SERVER_ID\u003dsd.ID join operating_systems os on os.ID\u003dsd.operating_system_ID where sd.is_deleted\u003d0\u003c/encode\u003e\" ) | Import ( frame \u003d [ CreateFrame ( frameType \u003d [ R ] , override \u003d [ true ] ) .as ( [ \"ServerDetails\" ] ) ] ) ;",
    "Frame ( frame \u003d [ ServerDetails ] ) | SetFrameFilter ( SERVER_IP \u003d\u003d [ \"192.168.98.114\" ] ) ;",
    "Frame ( frame \u003d [ ServerDetails ] ) | Select ( CORE_COUNT , CPU_COUNT , HOSTNAME , OPERATING_SYSTEM , PLATFORM_NAME , MEMORY_SIZE , THREAD_COUNT ) .as ( [ CORE_COUNT , CPU_COUNT , HOSTNAME , OPERATING_SYSTEM , PLATFORM_NAME , MEMORY_SIZE , THREAD_COUNT ] ) | With ( Panel ( 16 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"16\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"CORE_COUNT\" , \"CPU_COUNT\" , \"HOSTNAME\" , \"OPERATING_SYSTEM\" , \"PLATFORM_NAME\" , \"MEMORY_SIZE\" , \"THREAD_COUNT\" ] } } } ) | Collect ( 2000 ) ;",
    "Panel ( 16 ) | SetPanelView ( \"pipeline\" ) ;",
    "ServerDetails | Unpivot ( columns \u003d [ \"HOSTNAME\" , \"OPERATING_SYSTEM\" , \"PLATFORM_NAME\" , \"CORE_COUNT\" , \"CPU_COUNT\" , \"THREAD_COUNT\" , \"MEMORY_SIZE\" ] ) ;",
    "{ \"name\" : \"ServerDetails\" , \"type\" : \"R\" } ;",
    "Panel ( 16 ) | SetPanelView ( \"visualization\" ) ;",
    "Panel ( 16 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"subType\" : \"\" } } ] ) ;",
    "Frame ( frame \u003d [ ServerDetails ] ) | Select ( variable_1 , value_1 ) .as ( [ Name , value ] ) | With ( Panel ( 16 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"16\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Name\" , \"value\" ] } } } ) | Collect ( 2000 ) ;",
    "( AFFINITYGRAPHFRAME | UnfilterFrame ( Hosts ) ) ;",
    "Panel ( 0 ) | SetPanelPosition ( { \"top\" : 15 , \"left\" : 12 . 5 , \"width\" : 86 . 5 , \"height\" : 85 } ) ;",
    "Panel ( 1 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 5 , \"width\" : 20 , \"height\" : 5 } ) ;",
    "Panel ( 2 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 0 , \"width\" : 5 , \"height\" : 5 } ) ;",
    "Panel ( 3 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 25 , \"width\" : 25 , \"height\" : 5 } ) ;",
    "Panel ( 4 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 50 , \"width\" : 25 , \"height\" : 5 } ) ;",
    "Panel ( 5 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 75 , \"width\" : 25 , \"height\" : 5 } ) ;",
    "Panel ( 6 ) | SetPanelPosition ( { \"top\" : 5 , \"left\" : 0 , \"width\" : 25 , \"height\" : 5 } ) ;",
    "Panel ( 7 ) | SetPanelPosition ( { \"top\" : 5 , \"left\" : 25 , \"width\" : 25 , \"height\" : 5 } ) ;",
    "Panel ( 8 ) | SetPanelPosition ( { \"top\" : 5 , \"left\" : 50 , \"width\" : 25 , \"height\" : 5 } ) ;",
    "Panel ( 9 ) | SetPanelPosition ( { \"top\" : 5 , \"left\" : 75 , \"width\" : 25 , \"height\" : 5 } ) ;",
    "Panel ( 10 ) | SetPanelPosition ( { \"top\" : 10 , \"left\" : 0 , \"width\" : 50 , \"height\" : 5 } ) ;",
    "Panel ( 11 ) | SetPanelPosition ( { \"top\" : 10 , \"left\" : 50 , \"width\" : 50 , \"height\" : 5 } ) ;",
    "Panel ( 15 ) | SetPanelPosition ( { \"top\" : 15 , \"left\" : 0 . 2 , \"width\" : 12 , \"height\" : 85 } ) ;",
    "Panel ( 16 ) | SetPanelPosition ( { \"top\" : 50 , \"left\" : 73 , \"width\" : 25 , \"height\" : 50 } ) ;",
    "Panel ( 15 ) | AddPanelEvents ( { \"onSingleClick\" : { \"HostClick\" : [ { \"panel\" : \"0\" , \"query\" : \"\u003cencode\u003eClosePanel ( 16 ) ;\nAddPanel ( 16 ) ;\nPanel ( 16 ) | SetPanelLabel ( \u003cSelectedValues\u003e );\nPanel ( 16 ) | SetPanelPosition ( { \"top\" : 50 , \"left\" : 73 , \"width\" :25 , \"height\" : 50 } ) ;\n\nPanel ( 16 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"standard\"}\u003c/encode\u003e\" ) ;\nDatabase ( database \u003d [ \"3b3e4a3b-d382-4e98-9950-9b4e8b308c1c\" ] ) | Query ( \"\u003cencode\u003eselect sd.SERVER_IP,sd.HOSTNAME,os.OPERATING_SYSTEM,p.DISPLAY_NAME as PLATFORM_NAME ,pd.CPU_COUNT,pd.CORE_COUNT,pd.THREAD_COUNT,md.SIZE as MEMORY_SIZE from server_details sd join platforms p on sd.platform_ID\u003dp.ID join processor_details pd on pd.SERVER_ID\u003dsd.ID join memory_details md on md.SERVER_ID\u003dsd.ID join operating_systems os on os.ID\u003dsd.operating_system_ID where sd.is_deleted\u003d0\u003c/encode\u003e\" ) | Import ( frame \u003d [ CreateFrame ( frameType \u003d [ R ] , override \u003d [ true ] ) .as ( [ \"ServerDetails\" ] ) ] ) ;\nFrame ( frame \u003d [ ServerDetails ] )| SetFrameFilter(SERVER_IP\u003d\u003d\u003cSelectedValues\u003e);\nFrame ( frame \u003d [ ServerDetails ] ) | Select ( CORE_COUNT , CPU_COUNT , HOSTNAME , OPERATING_SYSTEM , PLATFORM_NAME , MEMORY_SIZE , THREAD_COUNT ) .as ( [ CORE_COUNT , CPU_COUNT , HOSTNAME , OPERATING_SYSTEM , PLATFORM_NAME ,  MEMORY_SIZE , THREAD_COUNT ] ) | With ( Panel ( 16 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"16\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [\"CORE_COUNT\" , \"CPU_COUNT\" , \"HOSTNAME\" , \"OPERATING_SYSTEM\" , \"PLATFORM_NAME\" ,\"MEMORY_SIZE\" , \"THREAD_COUNT\" ] } } } ) | Collect ( 2000 ) ;\nPanel ( 16 ) | SetPanelView ( \"pipeline\" ) ;\n ServerDetails | Unpivot ( columns \u003d [\"HOSTNAME\" ,\"OPERATING_SYSTEM\" , \"PLATFORM_NAME\",\"CORE_COUNT\" , \"CPU_COUNT\" ,\"THREAD_COUNT\", \"MEMORY_SIZE\"] ) ;\n{\"name\": \"ServerDetails\", \"type\": \"R\"};\n\nPanel ( 16 ) | SetPanelView ( \"visualization\" ) ;\n\nPanel ( 16 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"subType\" : \"\" } } ] ) ;\n\nFrame ( frame \u003d [ ServerDetails ] ) | Select ( variable_1 , value_1 ) .as ( [ Name , value ] ) | With ( Panel ( 16 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"16\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Name\" , \"value\" ] } } } ) | Collect ( 2000 ) ;\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;",
    "Panel(0)|SetPanelPosition({\"top\":15,\"left\":12.5,\"width\":86.5,\"height\":85});",
    "Panel(1)|SetPanelPosition({\"top\":0,\"left\":5,\"width\":20,\"height\":5});",
    "Panel(2)|SetPanelPosition({\"top\":0,\"left\":0,\"width\":5,\"height\":5});",
    "Panel(3)|SetPanelPosition({\"top\":0,\"left\":25,\"width\":25,\"height\":5});",
    "Panel(4)|SetPanelPosition({\"top\":0,\"left\":50,\"width\":25,\"height\":5});",
    "Panel(5)|SetPanelPosition({\"top\":0,\"left\":75,\"width\":25,\"height\":5});",
    "Panel(6)|SetPanelPosition({\"top\":5,\"left\":0,\"width\":25,\"height\":5});",
    "Panel(7)|SetPanelPosition({\"top\":5,\"left\":25,\"width\":25,\"height\":5});",
    "Panel(8)|SetPanelPosition({\"top\":5,\"left\":50,\"width\":25,\"height\":5});",
    "Panel(9)|SetPanelPosition({\"top\":5,\"left\":75,\"width\":25,\"height\":5});",
    "Panel(10)|SetPanelPosition({\"top\":10,\"left\":0,\"width\":50,\"height\":5});",
    "Panel(11)|SetPanelPosition({\"top\":10,\"left\":50,\"width\":50,\"height\":5});",
    "Panel(15)|SetPanelPosition({\"top\":15,\"left\":0.2,\"width\":12,\"height\":85});",
    "Panel(16)|SetPanelPosition({\"top\":50,\"left\":73,\"width\":25,\"height\":50});"
  ]
}